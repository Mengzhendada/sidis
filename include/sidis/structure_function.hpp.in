#ifndef SIDIS_STRUCTURE_FUNCTION_HPP
#define SIDIS_STRUCTURE_FUNCTION_HPP

#include "sidis/numeric.hpp"
#include "sidis/particle.hpp"
#include "sidis/tmd.hpp"

namespace sidis {
namespace sf {

struct SfUU;
struct SfUL;
struct SfUT;
struct SfLU;
struct SfLL;
struct SfLT;
struct SfXU;
struct SfXL;
struct SfXT;
struct SfUP;
struct SfLP;
struct SfUX;
struct SfLX;
struct SfXP;
struct SfXX;

/**
 * A type that provides structure functions.
 */
class SfSet {
public:
	part::Nucleus const target;

	SfSet(part::Nucleus target) : target(target) { }
	SfSet(SfSet const&) = delete;
	SfSet(SfSet&&) = delete;
	SfSet& operator=(SfSet const&) = delete;
	SfSet& operator=(SfSet&&) = delete;
	virtual ~SfSet() = default;

	virtual Real F_UUL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_UUT(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_UU_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_UU_cos_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;

	virtual Real F_UL_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_UL_sin_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;

	virtual Real F_UTL_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_UTT_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_UT_sin_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_UT_sin_3phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_UT_sin_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_UT_sin_phih_p_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;

	virtual Real F_LU_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;

	virtual Real F_LL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_LL_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;

	virtual Real F_LT_cos_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_LT_cos_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_LT_cos_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;

	SfUU sf_uu(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfUL sf_ul(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfUT sf_ut(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfLU sf_lu(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfLL sf_ll(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfLT sf_lt(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;

	SfXU sf_xu(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfXL sf_xl(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfXT sf_xt(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfUP sf_up(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfLP sf_lp(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfUX sf_ux(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfLX sf_lx(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;

	SfXP sf_xp(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfXX sf_xx(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfXX sf(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
};

/**
 * Computes structure functions directly from a set of TMDs and FFs.
 */
class TmdSfSet final : public SfSet {
public:
	TmdSet const& tmd_set;

	TmdSfSet(TmdSet const& tmd_set) :
		SfSet(tmd_set.target),
		tmd_set(tmd_set) { };

	Real F_UUL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UUT(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UU_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UU_cos_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_UL_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UL_sin_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_UTL_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UTT_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_3phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_phih_p_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LU_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LL_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LT_cos_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LT_cos_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LT_cos_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
};

/**
 * Computes structure functions using the Gaussian approximation to more
 * efficently evaluate the integrals.
 */
class GaussianTmdSfSet final : public SfSet {
public:
	GaussianTmdSet const& tmd_set;

	GaussianTmdSfSet(GaussianTmdSet const& tmd_set) :
		SfSet(tmd_set.target),
		tmd_set(tmd_set) { };

	Real F_UUL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UUT(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UU_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UU_cos_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_UL_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UL_sin_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_UTL_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UTT_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_3phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_phih_p_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LU_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LL_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LT_cos_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LT_cos_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LT_cos_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
};

class WwTmdSfSet final : public SfSet {
public:
	WwTmdSet const& tmd_set;

	WwTmdSfSet(WwTmdSet const& tmd_set) :
		SfSet(tmd_set.target),
		tmd_set(tmd_set) { }

	Real F_UUL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UUT(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UU_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UU_cos_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_UL_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UL_sin_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_UTL_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UTT_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_3phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_phih_p_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LU_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LL_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LT_cos_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LT_cos_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LT_cos_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
};

class GaussianWwTmdSfSet final : public SfSet {
public:
	GaussianWwTmdSet const& tmd_set;

	GaussianWwTmdSfSet(GaussianWwTmdSet const& tmd_set) :
		SfSet(tmd_set.target),
		tmd_set(tmd_set) { }

	Real F_UUL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UUT(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UU_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UU_cos_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_UL_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UL_sin_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_UTL_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UTT_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_3phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_phih_p_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LU_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LL_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LT_cos_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LT_cos_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LT_cos_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
};

/*[[[cog
import gen_struct
gen_struct.generate_structs_pol(
	"Sf",
	["U", "L"], ["U", "L", "T"],
	{
		("U", "U"): [
			["Real", "F_UUL"],
			["Real", "F_UUT"],
			["Real", "F_UU_cos_phih"],
			["Real", "F_UU_cos_2phih"],
		],
		("U", "L"): [
			["Real", "F_UL_sin_phih"],
			["Real", "F_UL_sin_2phih"],
		],
		("U", "T"): [
			["Real", "F_UTL_sin_phih_m_phis"],
			["Real", "F_UTT_sin_phih_m_phis"],
			["Real", "F_UT_sin_2phih_m_phis"],
			["Real", "F_UT_sin_3phih_m_phis"],
			["Real", "F_UT_sin_phis"],
			["Real", "F_UT_sin_phih_p_phis"],
		],
		("L", "U"): [
			["Real", "F_LU_sin_phih"],
		],
		("L", "L"): [
			["Real", "F_LL"],
			["Real", "F_LL_cos_phih"],
		],
		("L", "T"): [
			["Real", "F_LT_cos_phih_m_phis"],
			["Real", "F_LT_cos_2phih_m_phis"],
			["Real", "F_LT_cos_phis"],
		],
	},
	constructor_fields=True,
	generate_target_p=True
)
]]]*/
/*[[[end]]]*/

using SfUT1 = SfUT;
using SfUT2 = SfUT;
using SfLT1 = SfLT;
using SfLT2 = SfLT;
using SfXT1 = SfXT;
using SfXT2 = SfXT;

}
}

#endif

