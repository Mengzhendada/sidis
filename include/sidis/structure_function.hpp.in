#ifndef SIDIS_STRUCTURE_FUNCTION_HPP
#define SIDIS_STRUCTURE_FUNCTION_HPP

#include "sidis/numeric.hpp"
#include "sidis/particle.hpp"
#include "sidis/tmd.hpp"

namespace sidis {
namespace sf {

struct SfUU;
struct SfUL;
struct SfUT;
struct SfLU;
struct SfLL;
struct SfLT;
struct SfXU;
struct SfXL;
struct SfXT;
struct SfUP;
struct SfLP;
struct SfUX;
struct SfLX;
struct SfXP;
struct SfXX;

/**
 * \defgroup SfGroup Structure functions
 * Classes related to computing the structure functions.
 */
/// \{

/**
 * Complete set of structure functions bundled together. This abstract class is
 * to be derived for user-provided structure functions. If the structure
 * functions can be factorized into transverse momentum distributions (TMDs),
 * then one of the derived classes TmdSfSet, GaussianTmdSfSet, WwTmdSfSet, or
 * GaussianWwTmdSfSet will be more suitable.
 *
 * This class contains all leading twist and sub-leading twist structure
 * functions.
 */
class SfSet {
public:
	/// What type of part::Nucleus the structure functions are valid for.
	part::Nucleus const target;

	/// Initialize an SfSet for use on the specified type of target.
	SfSet(part::Nucleus target) : target(target) { }
	SfSet(SfSet const&) = delete;
	SfSet(SfSet&&) = delete;
	SfSet& operator=(SfSet const&) = delete;
	SfSet& operator=(SfSet&&) = delete;
	virtual ~SfSet() = default;

	/// \name Structure functions
	/// All leading twist and sub-leading twist SIDIS structure functions. By
	/// default, each of these returns zero.
	/// \{
	virtual Real F_UUL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_UUT(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_UU_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_UU_cos_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;

	virtual Real F_UL_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_UL_sin_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;

	virtual Real F_UTL_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_UTT_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_UT_sin_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_UT_sin_3phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_UT_sin_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_UT_sin_phih_p_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;

	virtual Real F_LU_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;

	virtual Real F_LL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_LL_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;

	virtual Real F_LT_cos_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_LT_cos_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	virtual Real F_LT_cos_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	/// \}

	/// \name Structure function combinations
	/// Convenience methods for retrieving groups of structure functions based
	/// on beam and target polarizations. For example, `sf_ut` will retrieve all
	/// structure functions of the form \f$F_{UT}^{\cdot}\f$.
	/// \{
	SfUU sf_uu(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfUL sf_ul(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfUT sf_ut(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfLU sf_lu(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfLL sf_ll(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfLT sf_lt(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;

	SfXU sf_xu(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfXL sf_xl(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfXT sf_xt(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfUP sf_up(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfLP sf_lp(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfUX sf_ux(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfLX sf_lx(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;

	SfXP sf_xp(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfXX sf_xx(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	SfXX sf(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const;
	/// \}
};

/**
 * Wrapper type for computing structure functions directly from the TMDs. The
 * structure functions are computed through convolution of the TMDs with the
 * fragmentation functions (FFs). If possible, prefer using a more specific
 * class such as GaussianTmdSet, WwTmdSet, or GaussianWwTmdSet to allow the
 * convolution to be computed more efficiently.
 *
 * The convolution used to compute the structure functions is:
 *
 * \f{equation}{
 *     F = x \sum_a e_a^2 \int d^2 \pmb{k}_{\perp} d^2 \pmb{P}_{\perp} \delta^{(2)}(z\pmb{k}_{\perp} + \pmb{P}_{\perp} - \pmb{p}_t)\omega f^a(x, |\pmb{k}_{\perp}|^2) D^a(x, |\pmb{D}_{\perp}|^2)
 * \f}
 *
 * Where \f$e_a\f$ is the charge of the parton flavor, \f$\omega\f$ is a
 * weighting factor, \f$f^a\f$ is a TMD, and \f$D^a\f$ is a FF.
 *
 * \sa TmdSet
 */
class TmdSfSet final : public SfSet {
public:
	/// The underlying TmdSet.
	TmdSet const& tmd_set;

	/// Initialize a TmdSfSet using the TMDs provided in \p tmd_set.
	TmdSfSet(TmdSet const& tmd_set) :
		SfSet(tmd_set.target),
		tmd_set(tmd_set) { };

	Real F_UUL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UUT(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UU_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UU_cos_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_UL_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UL_sin_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_UTL_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UTT_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_3phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_phih_p_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LU_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LL_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LT_cos_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LT_cos_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LT_cos_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
};

/**
 * More efficient version of TmdSet specialized for Gaussian TMDs. The
 * convolution can be evaluated analytically.
 *
 * \sa GaussianTmdSet
 */
class GaussianTmdSfSet final : public SfSet {
public:
	/// The underlying GaussianTmdSet.
	GaussianTmdSet const& tmd_set;

	/// Initialize a GaussianTmdSfSet using the TMDs provided in \p tmd_set.
	GaussianTmdSfSet(GaussianTmdSet const& tmd_set) :
		SfSet(tmd_set.target),
		tmd_set(tmd_set) { };

	Real F_UUL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UUT(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UU_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UU_cos_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_UL_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UL_sin_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_UTL_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UTT_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_3phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_phih_p_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LU_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LL_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LT_cos_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LT_cos_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LT_cos_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
};

/**
 * More efficient version of TmdSet specialized for TMDs with the
 * Wandzura-Wilczek-type (WW-type) approximation applied. The WW-type
 * approximation allows certain TMDs to be approximated in terms of others.
 *
 * \sa WwTmdSet
 */
class WwTmdSfSet final : public SfSet {
public:
	/// The underlying WwTmdSet.
	WwTmdSet const& tmd_set;

	/// Initialize a WwTmdSfSet using the TMDs provided in \p tmd_set.
	WwTmdSfSet(WwTmdSet const& tmd_set) :
		SfSet(tmd_set.target),
		tmd_set(tmd_set) { }

	Real F_UUL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UUT(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UU_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UU_cos_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_UL_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UL_sin_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_UTL_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UTT_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_3phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_phih_p_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LU_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LL_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LT_cos_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LT_cos_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LT_cos_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
};

/**
 * More efficient version of TmdSet specialized for combining the Gaussian and
 * WW-type approximations. Since there are some issues when combining these two
 * approximations (see \cite bastami2019ww), this case must be treated
 * separately from GaussianTmdSfSet and WwTmdSfSet.
 *
 * \sa GaussianWwTmdSet
 */
class GaussianWwTmdSfSet final : public SfSet {
public:
	/// The underlying GaussianWwTmdSet.
	GaussianWwTmdSet const& tmd_set;

	/// Initialize a GaussianWwTmdSfSet using the TMDs provided in \p tmd_set.
	GaussianWwTmdSfSet(GaussianWwTmdSet const& tmd_set) :
		SfSet(tmd_set.target),
		tmd_set(tmd_set) { }

	Real F_UUL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UUT(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UU_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UU_cos_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_UL_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UL_sin_2phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_UTL_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UTT_sin_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_3phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_UT_sin_phih_p_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LU_sin_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LL(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LL_cos_phih(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;

	Real F_LT_cos_phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LT_cos_2phih_m_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
	Real F_LT_cos_phis(part::Hadron h, Real x, Real z, Real Q_sq, Real ph_t_sq) const override;
};

/**
 * \defgroup SfCombsGroup Structure function combinations
 * The types here are used to combine structure function results by beam and
 * target polarization.
 *
 * \sa SfSet
 */
/// \{
/*[[[cog
import gen_struct
gen_struct.generate_structs_pol(
	"Sf",
	["U", "L"], ["U", "L", "T"],
	{
		("U", "U"): [
			["Real", "F_UUL"],
			["Real", "F_UUT"],
			["Real", "F_UU_cos_phih"],
			["Real", "F_UU_cos_2phih"],
		],
		("U", "L"): [
			["Real", "F_UL_sin_phih"],
			["Real", "F_UL_sin_2phih"],
		],
		("U", "T"): [
			["Real", "F_UTL_sin_phih_m_phis"],
			["Real", "F_UTT_sin_phih_m_phis"],
			["Real", "F_UT_sin_2phih_m_phis"],
			["Real", "F_UT_sin_3phih_m_phis"],
			["Real", "F_UT_sin_phis"],
			["Real", "F_UT_sin_phih_p_phis"],
		],
		("L", "U"): [
			["Real", "F_LU_sin_phih"],
		],
		("L", "L"): [
			["Real", "F_LL"],
			["Real", "F_LL_cos_phih"],
		],
		("L", "T"): [
			["Real", "F_LT_cos_phih_m_phis"],
			["Real", "F_LT_cos_2phih_m_phis"],
			["Real", "F_LT_cos_phis"],
		],
	},
	constructor_fields=True,
	generate_target_p=True
)
]]]*/
/*[[[end]]]*/

using SfUT1 = SfUT;
using SfUT2 = SfUT;
using SfLT1 = SfLT;
using SfLT2 = SfLT;
using SfXT1 = SfXT;
using SfXT2 = SfXT;
/// \}
/// \}

}
}

#endif

