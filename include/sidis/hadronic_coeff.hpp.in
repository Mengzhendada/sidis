#ifndef SIDIS_HADRONIC_COEFF_HPP
#define SIDIS_HADRONIC_COEFF_HPP

#include "sidis/kinematics.hpp"
#include "sidis/numeric.hpp"
#include "sidis/structure_function.hpp"
#include "sidis/vector.hpp"

namespace sidis {
namespace had {

/**
 * \defgroup HadGroup Hadron coefficients
 * Coefficients for describing the hadron part of the SIDIS process. The
 * coefficients come from the \f$\mathcal{H}_{i}\f$ coefficients in
 * \cite akushevich2019sidis.
 *
 * See the \ref XsGroup "cross-section" functions for details about what
 * coefficient sets are needed to compute which cross-sections.
 */
/// \{

/**
 * \defgroup HadStandardGroup Standard hadron coefficients
 * Standard coefficients \f$\mathcal{H}_{i}\f$ for a non-radiative SIDIS
 * process.
 *
 * Structure functions from sf::SfSet are used to calculate these coefficients.
 */
/// \{
/*[[[cog
import gen_struct
gen_struct.generate_structs_pol(
	"Had",
	["U", "L"], ["U", "L", "T"],
	{
		("U", "U"): [
			["Real", "H_10"],
			["Real", "H_20"],
			["Real", "H_30"],
			["Real", "H_40"],
		],
		("U", "L"): [
			["Real", "H_63"],
			["Real", "H_83"],
		],
		("U", "T"): [
			["Real", "H_12"],
			["Real", "H_22"],
			["Real", "H_32"],
			["Real", "H_42"],
			["Real", "H_61"],
			["Real", "H_81"],
		],
		("L", "U"): [
			["Real", "H_50"],
		],
		("L", "L"): [
			["Real", "H_73"],
			["Real", "H_93"],
		],
		("L", "T"): [
			["Real", "H_52"],
			["Real", "H_71"],
			["Real", "H_91"],
		],
	},
	constructors=[
		[["kin::Kinematics", "kin"], ["sf::SfXX", "sf"]],
		[["kin::Kinematics", "kin"], ["sf::SfSet", "sf"]],
	],
	generate_target_p=True
)
]]]*/
/*[[[end]]]*/
/// \}

/** \defgroup HadRadGroup Radiative hadron coefficients
 * These are the shifted versions of the coefficients
 * \f$\tilde{\mathcal{H}}_{i}\f$ calculated through the substitution
 * \f$q \rightarrow q - k\f$. They are needed for computing radiative
 * cross-section. These coefficients have an infrared divergence in the
 * \f$k \rightarrow 0\f$ case. For removing this divergence, see
 * \ref HadRadFGroup "HadRadFXX"-type coefficients.
 *
 * "Shifted" structure functions from sf::SfSet are used to calculate these
 * coefficients. It is recommended to supply an sf::SfSet instance directly so
 * that the constructor can calculate the required shift itself.
 */
/// \{
/*[[[cog
import gen_struct
gen_struct.generate_structs_pol(
	"HadRad",
	["U", "L"], ["U", "P"],
	{
		("U", "U"): [
			["Real", "H_10"],
			["Real", "H_20"],
			["Real", "H_30"],
			["Real", "H_40"],
		],
		("U", "P"): [
			["math::Vec3", "H_1"],
			["math::Vec3", "H_2"],
			["math::Vec3", "H_3"],
			["math::Vec3", "H_4"],
			["math::Vec3", "H_6"],
			["math::Vec3", "H_8"],
		],
		("L", "U"): [
			["Real", "H_50"],
		],
		("L", "P"): [
			["math::Vec3", "H_5"],
			["math::Vec3", "H_7"],
			["math::Vec3", "H_9"],
		], },
	constructors=[
		[["kin::KinematicsRad", "kin"], ["sf::SfXX", "shift_sf"]],
		[["kin::KinematicsRad", "kin"], ["sf::SfSet", "sf"]],
	],
	generate_target_p=False
)
]]]*/
/*[[[end]]]*/
/// \}

/**
 * \defgroup HadRadFGroup Infrared-divergent-free radiative hadron coefficients
 * A variation of the \ref HadRadGroup "HadRadXX"-type coefficients, in which
 * the infrared divergence at \f$k \rightarrow 0\f$ is removed through taking
 * the difference with the unshifted \ref HadStandardGroup "HadXX"-type
 * coefficients
 * (\f$\mathcal{H}_{i}^{F} = \frac{1}{R}(\tilde{\mathcal{H}}_{i} - \mathcal{H}_{i})\f$).
 *
 * "Shifted" structure functions from sf::SfSet are used to calculate these
 * coefficients. It is recommended to supply an sf::SfSet instance directly so
 * that the constructor can calculate the required shift itself.
 */
/// \{
/*[[[cog
import gen_struct
gen_struct.generate_structs_pol(
	"HadRadF",
	["U", "L"], ["U", "P"],
	{
		("U", "U"): [
			["Real", "H_10"],
			["Real", "H_20"],
			["Real", "H_30"],
			["Real", "H_40"],
			["Real", "H_10_diff"],
			["Real", "H_20_diff"],
			["Real", "H_30_diff"],
			["Real", "H_40_diff"],
		],
		("U", "P"): [
			["math::Vec3", "H_1"],
			["math::Vec3", "H_2"],
			["math::Vec3", "H_3"],
			["math::Vec3", "H_4"],
			["math::Vec3", "H_6"],
			["math::Vec3", "H_8"],
			["math::Vec3", "H_1_diff"],
			["math::Vec3", "H_2_diff"],
			["math::Vec3", "H_3_diff"],
			["math::Vec3", "H_4_diff"],
			["math::Vec3", "H_6_diff"],
			["math::Vec3", "H_8_diff"],
		],
		("L", "U"): [
			["Real", "H_50"],
			["Real", "H_50_diff"],
		],
		("L", "P"): [
			["math::Vec3", "H_5"],
			["math::Vec3", "H_7"],
			["math::Vec3", "H_9"],
			["math::Vec3", "H_5_diff"],
			["math::Vec3", "H_7_diff"],
			["math::Vec3", "H_9_diff"],
		],
	},
	constructors=[
		[["kin::KinematicsRad", "kin"], ["sf::SfXX", "sf"], ["sf::SfXX", "shift_sf"]],
		[["kin::KinematicsRad", "kin"], ["sf::SfSet", "sf"]],
		[["kin::KinematicsRad", "kin"], ["sf::SfSet", "sf"], ["had::HadXX", "had_0"]],
	],
	generate_target_p=False
)
]]]*/
/*[[[end]]]*/
/// \}
/// \}

}
}

#endif

